apiVersion: v1
kind: Service
metadata:
  name: linkerd-ingress-gateway
  namespace: linkerd-ingress
  annotations:
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: 8080
  selector:
    app: linkerd-ingress-gateway
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: linkerd-ingress-gateway
  namespace: linkerd-ingress
  labels:
    app: linkerd-ingress-gateway
spec:
  replicas: 1
  selector:
    matchLabels:
      app: linkerd-ingress-gateway
  template:
    metadata:
      labels:
        app: linkerd-ingress-gateway
      annotations:
        linkerd.io/inject: enabled
    spec:
      containers:
      - name: nginx
        image: nginx:alpine
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/conf.d
      volumes:
      - name: nginx-config
        configMap:
          name: nginx-config
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: linkerd-ingress
data:
  default.conf: |
    server {
        listen 8080;
        
        location /argocd {
            proxy_pass http://argocd-server.argocd.svc.cluster.local:80;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location /argocd/ {
            proxy_pass http://argocd-server.argocd.svc.cluster.local:80;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location /ping {
            return 200 "pong";
            add_header Content-Type text/plain;
        }
        
        location / {
            return 404;
        }
    } 